фреймворк нацеленный на оптимизацию используемых ресурсов путём уменьшения абстракций над "железом"


Работа контейнера в kora разделена на две части, на то что выполняется в рантайме и на то что выполняется во время компиляции.


Вся логика времени исполнения вызывается через метод KoraApplication.run, он делает следующие вещи:

- Инициализация всех компонентов в контейнере
- Отслеживание изменений в контейнере
- Атомарное обновление графа при изменениях
- Graceful shutdown при получении сигнала SIGTERM

На этап компиляции вынесен поиск компонентов для построения всего контейнера
Аннотацию KoraApp, которая проставляется над интерфейсом, внутри которого лежат фабричные методы для создания всех компонентов

@KoraApp
public interface Application {

    default SomeService someService() {
        return new SomeService();
    }

    default OtherService otherService(SomeService someService) {
        return new OtherService(someService);
    }
}


Модуль:
Интерфейс, предоставляющий фабричные методы для создания компонентов (?)

Компонент:
 компоненты ищутся в модулях




ApplicationGraph - класс, в котором описано, как собираются все компоненты контейнера. Генерируется на этапе компиляции
KoraApplication.run запускает параллельную инициализацию всех компонентов в контейнере и блокирует основной поток до получения сигнала SIGTERM, после этого приложение начинает graceful shutdown.



LogbackModule - дает логи в формате json
UndertowHttpServerModule - Сервер для публичного апи на порту 8080, Сервер для системного апи на порту 8085




Плюсы:
	запусе занимает X времени по сравнению с Y(с использованием спринг)

Минусы:
	нет автоматического поиска  модулей, они должны быть все явно указаны extends
        ConfigModule,
        UndertowHttpServerModule
	нельзя использовать eclair
	нет всяких плюшек типа реквест хэндлеров и проч
	погружение всех членов команды


Улучшения:
HttpRoute имеет обязательный параметр path, хотя он мог брать бы родительский

